{"version":3,"sources":["Components/Title.js","Components/Photo.js","Components/PhotoWall.js","Components/AddPhoto.js","Components/Main.js","serviceWorker.js","redux/reducer.js","index.js"],"names":["Title","props","title","Photo","post","className","src","imageLink","alt","description","onClick","onRemovePhoto","PhotoWall","to","posts","sort","x","y","id","map","index","key","AddPhoto","handleSubmit","bind","event","preventDefault","target","elements","link","value","Number","Date","this","onAddPhoto","onSubmit","type","placeholder","name","Component","Main","state","removePhoto","postRemoved","console","log","setState","filter","postSubmitted","concat","prevProps","prevState","exact","path","render","onNavigate","navigate","history","addedPost","addPhoto","push","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","postReducer","store","createStore","rootReducer","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"uQAKeA,MAJf,SAAeC,GACd,OAAO,gCAAMA,EAAMC,MAAZ,MC0BOC,MA1Bf,SAAeF,GACb,IAAMG,EAAOH,EAAMG,KACnB,OACE,4BAAQC,UAAU,UAChB,yBAAKA,UAAU,QAAQC,IAAKF,EAAKG,UAAWC,IAAKJ,EAAKK,cACtD,oCACG,IACD,+BAAKL,EAAKK,YAAV,KAA4B,KAE9B,yBAAKJ,UAAU,oBACb,4BACEK,QAAS,WACPT,EAAMU,cAAcP,KAGrB,IALH,SAMS,Q,OCaFQ,MA1Bf,SAAmBX,GACjB,OACE,6BACE,kBAAC,IAAD,CAAMI,UAAU,UAAUQ,GAAG,aAC1B,KAEH,yBAAKR,UAAU,aACZJ,EAAMa,MACJC,MAAK,SAASC,EAAGC,GAChB,OAAOA,EAAEC,GAAKF,EAAEE,MAEjBC,KAAI,SAACf,EAAMgB,GAAP,OACH,kBAAC,EAAD,CACEC,IAAKD,EACLhB,KAAMA,EACNO,cAAeV,EAAMU,sBCcpBW,E,kDAhCd,aAAe,IAAD,8BACd,gBACKC,aAAe,EAAKA,aAAaC,KAAlB,gBAFN,E,gDAId,SAAaC,GACbA,EAAMC,iBACN,IAAMnB,EAAYkB,EAAME,OAAOC,SAASC,KAAKC,MACvCrB,EAAcgB,EAAME,OAAOC,SAASnB,YAAYqB,MAChD1B,EAAO,CACbc,GAAIa,OAAO,IAAIC,MACfvB,YAAaA,EACbF,UAAWA,GAEPE,GAAeF,GACnB0B,KAAKhC,MAAMiC,WAAW9B,K,oBAGtB,WACA,OACA,6BACA,2CACA,yBAAKC,UAAU,QACf,0BAAM8B,SAAUF,KAAKV,cACrB,2BAAOa,KAAM,OAAOC,YAAY,OAAOC,KAAK,SAC5C,2BAAOF,KAAM,OAAOC,YAAY,aAAaC,KAAK,gBAClD,iD,GA1BsBC,a,OCmFRC,E,kDA9Eb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACX3B,MAAO,CACL,CACEI,GAAI,EACJT,YAAa,sBACbF,UACE,mPAGJ,CACEW,GAAI,EACJT,YAAa,YACbF,UACE,qLAGJ,CACEW,GAAI,EACJT,YAAa,iBACbF,UACE,mIAIR,EAAKmC,YAAc,EAAKA,YAAYlB,KAAjB,gBA1BP,E,+CA4Bd,SAAYmB,GACVC,QAAQC,IAAIF,EAAYlC,aACxBwB,KAAKa,UAAS,SAAAL,GAAK,MAAK,CACtB3B,MAAO2B,EAAM3B,MAAMiC,QAAO,SAAA3C,GAAI,OAAIA,IAASuC,W,sBAG/C,SAASK,GACPf,KAAKa,UAAS,SAAAL,GAAK,MAAK,CACtB3B,MAAO2B,EAAM3B,MAAMmC,OAAO,CAACD,U,+BAG/B,c,gCAEA,SAAmBE,EAAWC,GAC5BP,QAAQC,IAAIM,EAAUrC,OACtB8B,QAAQC,IAAIZ,KAAKQ,S,oBAEnB,WAAU,IAAD,OAEP,OADAG,QAAQC,IAAIZ,KAAKQ,MAAM3B,OAErB,6BACE,kBAAC,IAAD,CACEsC,OAAK,EACLC,KAAK,IACLC,OAAQ,kBACN,6BACE,kBAAC,EAAD,CAAOpD,MAAO,cACd,kBAAC,EAAD,CACEY,MAAO,EAAK2B,MAAM3B,MAClBH,cAAe,EAAK+B,YACpBa,WAAY,EAAKC,eAKzB,kBAAC,IAAD,CACEH,KAAK,YACLC,OAAQ,gBAAGG,EAAH,EAAGA,QAAH,OACN,kBAAC,EAAD,CACEvB,WAAY,SAAAwB,GACV,EAAKC,SAASD,GACdD,EAAQG,KAAK,gB,GAtEVrB,aCObsB,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBnC,QACf6B,UAAUC,cAAcQ,YAI1BnC,QAAQC,IACN,iHAKEwB,GAAUA,EAAOW,UACnBX,EAAOW,SAASN,KAMlB9B,QAAQC,IAAI,sCAGRwB,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUP,WAO5BQ,OAAM,SAAAC,GACLvC,QAAQuC,MAAM,4CAA6CA,M,YC1FpDC,EAJK,SAAStE,IAA8B,IAAxB2B,EAAuB,uDAAf3B,EACvC,OAAO2B,G,QCOL4C,EAAQC,YAAYC,GAE1BC,IAASlC,OAAO,kBAAC,IAAD,CAAU+B,MAAOA,GAAO,kBAAC,IAAD,KAAe,kBAAC,EAAD,QAAoCI,SAASC,eAAe,SFU1G,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,GAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,GAAN,sBAEP/B,IAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACLtC,QAAQC,IACN,oEAvFA6D,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjC7B,QAAQC,IACN,iHAMJsB,EAAgBC,EAAOC,OEpCjCE,K","file":"static/js/main.749dd281.chunk.js","sourcesContent":["import React from 'react'\nfunction Title(props) {\n return <h1> {props.title} </h1>\n \n}\nexport default Title","import React from \"react\";\nimport PropTypes from \"prop-types\";\nfunction Photo(props) {\n  const post = props.post;\n  return (\n    <figure className=\"figure\">\n      <img className=\"photo\" src={post.imageLink} alt={post.description} />\n      <figcaption>\n        {\" \"}\n        <p> {post.description} </p>{\" \"}\n      </figcaption>\n      <div className=\"button-container\">\n        <button\n          onClick={() => {\n            props.onRemovePhoto(post);\n          }}\n        >\n          {\" \"}\n          Remove{\" \"}\n        </button>\n      </div>\n    </figure>\n  );\n}\nPhoto.propTypes = {\n  post: PropTypes.object.isRequired,\n  onRemovePhoto: PropTypes.func.isRequired\n};\nexport default Photo;\n","import React from \"react\";\nimport Photo from \"./Photo\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n//anchor tag, href attribute\nfunction PhotoWall(props) {\n  return (\n    <div>\n      <Link className=\"addIcon\" to=\"/AddPhoto\">\n        {\" \"}\n      </Link>\n      <div className=\"photoGrid\">\n        {props.posts\n          .sort(function(x, y) {\n            return y.id - x.id;\n          })\n          .map((post, index) => (\n            <Photo\n              key={index}\n              post={post}\n              onRemovePhoto={props.onRemovePhoto}\n            />\n          ))}\n      </div>\n    </div>\n  );\n}\nPhotoWall.propTypes = {\n  posts: PropTypes.array.isRequired,\n  onRemovePhoto: PropTypes.func.isRequired\n};\nexport default PhotoWall;\n","import React, {Component} from 'react'\nclass AddPhoto extends Component {\n constructor() {\n super()\n this.handleSubmit = this.handleSubmit.bind(this)\n }\n handleSubmit(event) {\n event.preventDefault();\n const imageLink = event.target.elements.link.value\n const description = event.target.elements.description.value\n const post = {\n id: Number(new Date()),\n description: description,\n imageLink: imageLink\n }\n if (description && imageLink){\n this.props.onAddPhoto(post)\n }\n }\n render() {\n return (\n <div>\n <h1> Photowall </h1>\n <div className=\"form\">\n <form onSubmit={this.handleSubmit}> \n <input type =\"text\" placeholder=\"Link\" name=\"link\"/>\n <input type =\"text\" placeholder=\"Desciption\" name=\"description\"/>\n <button> Post </button>\n </form>\n </div>\n </div>\n )\n }\n}\nexport default AddPhoto","import React, { Component } from \"react\";\nimport Title from \"./Title\";\nimport PhotoWall from \"./PhotoWall\";\nimport AddPhoto from \"./AddPhoto\";\nimport { Route } from \"react-router-dom\";\nclass Main extends Component {\n  constructor() {\n    super();\n    this.state = {\n      posts: [\n        {\n          id: 0,\n          description: \"beautiful landscape\",\n          imageLink:\n            \"https://image.jimcdn.com/app/cms/image/transf/none/path/sa6549607c78f5c11/image/i4eeacaa2dbf12d6d/version/1490299332/most-beautiful-landscapes-in-europe-lofoten-european-best-destinations-copyright-iakov-kalinin.jpg\" +\n            \"3919321_1443393332_n.jpg\"\n        },\n        {\n          id: 1,\n          description: \"Aliens???\",\n          imageLink:\n            \"https://img.purch.com/rc/640x415/aHR0cDovL3d3dy5zcGFjZS5jb20vaW1hZ2VzL2kvMDAwLzA3Mi84NTEvb3JpZ2luYWwvc3BhY2V4LWlyaWRpdW00LWxhdW5jaC10YXJpcS1tYWxpay5qcGc=\" +\n            \"08323785_735653395_n.jpg\"\n        },\n        {\n          id: 2,\n          description: \"On a vacation!\",\n          imageLink:\n            \"https://fm.cnbc.com/applications/cnbc.com/resources/img/editorial/2017/08/24/104670887-VacationExplainsTHUMBWEB.1910x1000.jpg\"\n        }\n      ]\n    };\n    this.removePhoto = this.removePhoto.bind(this);\n  }\n  removePhoto(postRemoved) {\n    console.log(postRemoved.description);\n    this.setState(state => ({\n      posts: state.posts.filter(post => post !== postRemoved)\n    }));\n  }\n  addPhoto(postSubmitted) {\n    this.setState(state => ({\n      posts: state.posts.concat([postSubmitted])\n    }));\n  }\n  componentDidMount() {}\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(prevState.posts);\n    console.log(this.state);\n  }\n  render() {\n    console.log(this.state.posts);\n    return (\n      <div>\n        <Route\n          exact\n          path=\"/\"\n          render={() => (\n            <div>\n              <Title title={\"PhotoBook\"} />\n              <PhotoWall\n                posts={this.state.posts}\n                onRemovePhoto={this.removePhoto}\n                onNavigate={this.navigate}\n              />\n            </div>\n          )}\n        />\n        <Route\n          path=\"/AddPhoto\"\n          render={({ history }) => (\n            <AddPhoto\n              onAddPhoto={addedPost => {\n                this.addPhoto(addedPost);\n                history.push(\"/\");\n              }}\n            />\n          )}\n        />\n      </div>\n    );\n  }\n}\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }\n  ","import posts from '../data/posts';\n\nconst postReducer = function posts(state = posts, action) {\n    return state;\n}\n\nexport default postReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './Components/Main';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\nimport {createStore} from 'redux';\nimport rootReducer from './redux/reducer';\nimport {Provider} from 'react-redux';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}><BrowserRouter><Main/></BrowserRouter></Provider>, document.getElementById('root'));\n\nserviceWorker.register();"],"sourceRoot":""}